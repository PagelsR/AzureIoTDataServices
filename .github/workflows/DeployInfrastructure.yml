# This is a basic workflow to help you get started with Actions

name: Build_and_Deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

  workflow_dispatch:

env:
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'
  dotnet_version: '6.x.x'
  Azure_Resource_GroupName: 'rg-PagelsR-IoTDataServices-dev'
  Azure_Resource_GroupLocation: 'eastus'
  
permissions:
  contents: read
  packages: write
      
jobs:
  Build_Application:
    runs-on: windows-latest #ubuntu-latest
    name: Build Application
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.dotnet_version }}

      # Run dotnet build and publish
    # - name: dotnet build unit test and publish
    #   run: |
    #     dotnet restore
    #     dotnet build FunctionApps/FunctionApps.csproj --configuration ${{ env.buildConfiguration }} --no-restore
    #     dotnet publish FunctionApps/FunctionApps.csproj --configuration ${{ env.buildConfiguration }} --no-build --no-restore -o './FunctionApps'

    # - name: Restore dependencies
    #   run: dotnet restore FunctionApps/FunctionApps.csproj

    # - name: Build
    #   run: dotnet build FunctionApps/FunctionApps.csproj --configuration ${{ env.buildConfiguration }} --no-restore

    # - name: Publish
    #   run: dotnet publish FunctionApps/FunctionApps.csproj --configuration ${{ env.buildConfiguration }} --no-build --no-restore -o './FunctionApps'

    # cd FunctionApps
    # dotnet restore FunctionApps.csproj
    # dotnet build FunctionApps.csproj --configuration ${{ env.buildConfiguration }} --no-restore
    # dotnet publish FunctionApps.csproj --configuration ${{ env.buildConfiguration }} --no-build --no-restore -o './FunctionApps'


    - name: dotnet build unit test and publish
      run: |
        cd FunctionApps
        dotnet restore FunctionApps.csproj
        dotnet build FunctionApps.csproj --configuration ${{ env.buildConfiguration }} --no-restore
        dotnet publish FunctionApps.csproj --configuration ${{ env.buildConfiguration }} --no-build --no-restore -o './FunctionApps'
      working-directory: ./FunctionApps

    - name: Upload Build Artifacts-FuncApp
      uses: actions/upload-artifact@v2
      with:
        name: FunctionApps
        path: ${{ github.workspace }}/FunctionApps

    - name: Upload Infrastucture Files
      uses: actions/upload-artifact@v3
      with:
        name: IaC
        path: ${{ github.workspace }}/IaC/*.*
  
  Deploy_Infrastructure:
    runs-on: ubuntu-latest
    name: Deploy Infrastructure
    needs: Build_Application
    outputs:
      output_functionAppName: ${{ steps.Infra.outputs.out_functionAppName }}
      output_iotHubName: ${{ steps.Infra.outputs.out_iotHubName }}

    steps:
    - name: Login to Azure
      uses: azure/login@v1
      continue-on-error: false
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Ensure Resource Group Exists
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          #!/bin/bash
          az group create --name ${{ env.Azure_Resource_GroupName }} --location ${{ env.Azure_Resource_GroupLocation }}

    - name: Ensure Resource Group is UnLocked
      #if: contains(github.event_name, 'push')
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          az group lock delete --name DontDeleteMe --resource-group ${{ env.Azure_Resource_GroupName }}

    - name: Download Build Artifact-Infrastructure
      uses: actions/download-artifact@v2
      continue-on-error: false
      with:
        name: IaC
        path: ${{ github.workspace }}/IaC

    - name: Deploy Infrastructure
      id: Infra
      uses: azure/arm-deploy@v1
      continue-on-error: false
      with:
        scope: resourcegroup
        resourceGroupName: ${{ env.Azure_Resource_GroupName }}
        template: ./IaC/main.bicep
        #parameters: ./IaC/main-1.params.json Deployed_Environment=${{ env.Deployed_Environment }}
        deploymentMode: Incremental
        failOnStdErr: false

    - name: Ensure Resource Group is Locked
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          az group lock create --lock-type CanNotDelete --name DontDeleteMe --resource-group ${{ env.Azure_Resource_GroupName }} --notes 'Prevent deletion of the resource group'
  
  Deploy_IoT_Device:
    runs-on: ubuntu-latest
    name: Deploy IoT Device
    needs: [Deploy_Infrastructure, Deploy_Application]
      
    permissions:
      contents: read

    # Identify any jobs that must complete successfully before this job will run.
    steps:
      
    - name: Login to Azure
      uses: azure/login@v1
      continue-on-error: false
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Install Azure IoT Extension
    - name: Install Azure IoT Extension
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          az extension add --name azure-iot

    - name: DEBUG ONLY Display Output Variables
      run: |
        echo 'output_functionAppName: ${{ needs.Deploy_Infrastructure.outputs.output_functionAppName }}'
        echo 'output_iotHubName: ${{ needs.Deploy_Infrastructure.outputs.output_iotHubName }}'

    # Create an IoT device
    - name: Create an IoT device
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          az iot hub device-identity create -n ${{ needs.Deploy_Infrastructure.outputs.output_iotHubName }} -d 'raspberrypi-detroit-000' --ee

  Deploy_Application:
    runs-on: ubuntu-latest
    name: Deploy Application
    needs: [Deploy_Infrastructure, Build_Application]
      
    permissions:
      contents: read
    #  packages: write

    # Identify any jobs that must complete successfully before this job will run.
    steps:
      
    - name: Login to Azure
      uses: azure/login@v1
      continue-on-error: false
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Ensure Resource Group is UnLocked
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          az group lock delete --name DontDeleteMe --resource-group ${{ env.Azure_Resource_GroupName }} && sleep 10

    - name: Download Build Artifacts-Function Application
      uses: actions/download-artifact@v2
      continue-on-error: false
      with:
        name: FunctionApps
        path: ${{ github.workspace }}/FunctionApps

    # Deploy Function Application
    - name: 'Deploy Function Application'
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ needs.Deploy_Infrastructure.outputs.output_functionAppName }}
        slot-name: 'production'
        package: './FunctionApps'
      
    - name: Ensure Resource Group is Locked
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          az group lock create --lock-type CanNotDelete --name DontDeleteMe --resource-group ${{ env.Azure_Resource_GroupName }} --notes 'Prevent deletion of the resource group'
  
    - name: 'Azure logout'
      run: |
        az logout
          
  Define_IoT_Route:
    runs-on: ubuntu-latest
    name: Add Msg Route to IoT Hub
    needs: [Deploy_Infrastructure, Deploy_Application]
      
    permissions:
      contents: read

    # Identify any jobs that must complete successfully before this job will run.
    steps:
      
    - name: Login to Azure
      uses: azure/login@v1
      continue-on-error: false
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Ensure Resource Group is UnLocked
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          az group lock delete --name DontDeleteMe --resource-group ${{ env.Azure_Resource_GroupName }} && sleep 10

    - name: Add route to IoT Hub
      run: |
        az iot hub route create --resource-group ${{ env.Azure_Resource_GroupName }} --hub-name ${{ needs.Deploy_Infrastructure.outputs.output_iotHubName }} --endpoint-name "HubwayTelemetryRoute" --source "DeviceMessages" --condition "RoutingProperty = 'Hubway'" --name "BostonHubwayTelemetryRoute" --enabled true

    - name: Ensure Resource Group is Locked
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          az group lock create --lock-type CanNotDelete --name DontDeleteMe --resource-group ${{ env.Azure_Resource_GroupName }} --notes 'Prevent deletion of the resource group'
                
    - name: 'Azure logout'
      run: |
        az logout

  Define_EventHub_EndPoint:
    runs-on: ubuntu-latest
    name: Add EndPoint to EventHub
    needs: [Deploy_Infrastructure, Deploy_Application]
      
    permissions:
      contents: read

    # Identify any jobs that must complete successfully before this job will run.
    steps:
      
    - name: Login to Azure
      uses: azure/login@v1
      continue-on-error: false
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Ensure Resource Group is UnLocked
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          az group lock delete --name DontDeleteMe --resource-group ${{ env.Azure_Resource_GroupName }} && sleep 10

    - name: Add route to IoT Hub
      run: |
        az iot hub routing-endpoint create --connection-string 'Endpoint=sb://rg-pagelsr-iotdataservices-eventhub.servicebus.windows.net:5671/;SharedAccessKeyName=iothubroutes_${{ env.Azure_Resource_GroupName }} --hub-name ${{ needs.Deploy_Infrastructure.outputs.output_iotHubName }};SharedAccessKey=****;EntityPath=hubwaytelemetry' --endpoint-resource-group ${{ env.Azure_Resource_GroupName }} --endpoint-subscription-id '295e777c-2a1b-456a-989e-3c9b15d52a8e' --endpoint-type 'EventHub' --hub-name ${{ needs.Deploy_Infrastructure.outputs.output_iotHubName }} --name 'HubwayTelemetryRoute'

    - name: Ensure Resource Group is Locked
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          az group lock create --lock-type CanNotDelete --name DontDeleteMe --resource-group ${{ env.Azure_Resource_GroupName }} --notes 'Prevent deletion of the resource group'
                
    - name: 'Azure logout'
      run: |
        az logout