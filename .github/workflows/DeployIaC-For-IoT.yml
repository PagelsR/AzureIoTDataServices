name: Deploy IaC for IoT Rig

on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

  workflow_dispatch:

env:
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'
  dotnet_version: '6.x.x'
  Azure_Resource_GroupName: 'rg-PagelsR-IoTDataServices-dev2'
  Azure_Resource_GroupLocation: 'eastus'

jobs:
  Build_Application:
    runs-on: ubuntu-latest
    name: Build Application
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.dotnet_version }}

    - name: Restore dependencies
      run: dotnet restore FunctionApps/FunctionApps.csproj

    - name: Build
      run: dotnet build FunctionApps/FunctionApps.csproj --configuration Release --no-restore

    - name: Publish
      run: dotnet publish FunctionApps/FunctionApps.csproj --configuration Release --no-build --output ./build_output
        
    - name: Upload Build Artifacts-FuncApp
      uses: actions/upload-artifact@v2
      with:
        name: FunctionApps
        path: ${{ github.workspace }}/build_output

    - name: Upload Infrastucture Files
      uses: actions/upload-artifact@v3
      with:
        name: IaC-v2
        path: ${{ github.workspace }}/IaC-v2/*.*

  Deploy_Infrastructure:
    runs-on: ubuntu-latest
    name: Deploy Infrastructure
    needs: Build_Application
    outputs:
      output_functionAppName: ${{ steps.Infra.outputs.out_functionAppName }}
      output_iotHubName: ${{ steps.Infra.outputs.out_iotHubName }}
      output_eventHubPrimaryConnectionString: ${{ steps.Infra.outputs.out_eventHubPrimaryConnectionString }}
      output_iotDeviceName: ${{ steps.Infra.outputs.out_iotDeviceName }}

    steps:
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Ensure Resource Group Exists
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          #!/bin/bash
          az group create --name ${{ env.Azure_Resource_GroupName }} --location ${{ env.Azure_Resource_GroupLocation }}
  
    - name: Install Bicep CLI
      run: |
        curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
        chmod +x ./bicep
        sudo mv ./bicep /usr/local/bin/bicep
        bicep --help

    - name: Ensure Resource Group is UnLocked
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          az group lock delete --name DontDeleteMe --resource-group ${{ env.Azure_Resource_GroupName }}
  
    - name: Download Build Artifact-Infrastructure
      uses: actions/download-artifact@v2
      continue-on-error: false
      with:
        name: IaC-v2
        path: ${{ github.workspace }}/IaC-v2

    - name: Validate Bicep template
      run: |
        bicep build ./IaC-v2/main.bicep

    - name: Deploy Infrastructure
      id: Infra
      uses: azure/arm-deploy@v1
      continue-on-error: false
      with:
        scope: resourcegroup
        resourceGroupName: ${{ env.Azure_Resource_GroupName }}
        template: ./IaC-v2/main.bicep
        deploymentMode: Incremental
        failOnStdErr: false

    - name: DEBUG ONLY Display Output Variables
      run: |
        echo 'output_functionAppName: ${{ steps.Infra.outputs.out_functionAppName }}'
        echo 'output_iotHubName: ${{ steps.Infra.outputs.out_iotHubName }}'
        echo 'output_eventHubPrimaryConnectionString: ${{ steps.Infra.outputs.out_eventHubPrimaryConnectionString }}'
        echo 'output_iotDeviceName: ${{ steps.Infra.outputs.out_iotDeviceName }}'
    
    - name: Ensure Resource Group is Locked
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          az group lock create --lock-type CanNotDelete --name DontDeleteMe --resource-group ${{ env.Azure_Resource_GroupName }} --notes 'Prevent deletion of the resource group'

  Deploy_Application:
    runs-on: ubuntu-latest
    name: Deploy Application
    needs: [Deploy_Infrastructure, Build_Application]
      
    steps:
      
    - name: Login to Azure
      uses: azure/login@v1
      continue-on-error: false
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Ensure Resource Group is UnLocked
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          az group lock delete --name DontDeleteMe --resource-group ${{ env.Azure_Resource_GroupName }} && sleep 10

    - name: Download Build Artifacts-Function Application
      uses: actions/download-artifact@v2
      continue-on-error: false
      with:
        name: FunctionApps
        path: ${{ github.workspace }}/build_output

    # Deploy Function Application
    - name: 'Deploy Function Application'
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ needs.Deploy_Infrastructure.outputs.output_functionAppName }}
        slot-name: 'production'
        package: './build_output'
      
    - name: Ensure Resource Group is Locked
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          az group lock create --lock-type CanNotDelete --name DontDeleteMe --resource-group ${{ env.Azure_Resource_GroupName }} --notes 'Prevent deletion of the resource group'
  
    - name: 'Azure logout'
      run: |
        az logout
        

  Deploy_IoT_Device:
    runs-on: ubuntu-latest
    name: Add IoT Device
    needs: [Deploy_Infrastructure]

    steps:
    
      - name: Login to Azure
        uses: azure/login@v1
        continue-on-error: false
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Install Azure IoT Extension
      - name: Install Azure IoT Extension
        uses: Azure/CLI@v1
        continue-on-error: true
        with:
          inlineScript: |
            az extension add --name azure-iot

      - name: DEBUG ONLY Display Output Variables
        run: |
          echo 'output_functionAppName: ${{ needs.Deploy_Infrastructure.outputs.output_functionAppName }}'
          echo 'output_iotHubName: ${{ needs.Deploy_Infrastructure.outputs.output_iotHubName }}'
          echo 'output_eventHubPrimaryConnectionString: ${{ needs.Deploy_Infrastructure.outputs.output_eventHubPrimaryConnectionString }}'
          echo 'output_iotDeviceName: ${{ needs.Deploy_Infrastructure.outputs.output_iotDeviceName }}'

      # Create an IoT device
      - name: Create an IoT device
        uses: Azure/CLI@v1
        continue-on-error: true
        with:
          inlineScript: |
            az iot hub device-identity create -n ${{ needs.Deploy_Infrastructure.outputs.output_iotHubName }} -d ${{ needs.Deploy_Infrastructure.outputs.output_iotDeviceName }} --ee

      # Enable Azure Defender for IoT
      # - name: Enable Azure Defender for IoT
      #   uses: Azure/CLI@v1
      #   continue-on-error: true
      #   with:
      #     inlineScript: |
      #       az security iot-solution create --solution-name 'default' --resource-group ${{ env.Azure_Resource_GroupName }} --iot-hubs '/subscriptions/295e777c-2a1b-456a-989e-3c9b15d52a8e/resourceGroups/${{ env.Azure_Resource_GroupName }}/providers/Microsoft.Devices/${{ needs.Deploy_Infrastructure.outputs.output_iotHubName }}' --display-name 'Default Solution' --location ${{ env.Azure_Resource_GroupLocation }}

      - name: Logout of Azure
        run: |
          az logout
